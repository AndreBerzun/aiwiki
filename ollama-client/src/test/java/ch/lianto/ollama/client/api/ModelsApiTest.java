/*
 * Ollama API
 * API Spec for Ollama API. Please see https://github.com/jmorganca/ollama/blob/main/docs/api.md for more details.
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.lianto.ollama.client.api;

import ch.lianto.ollama.client.model.CopyModelRequest;
import ch.lianto.ollama.client.model.CreateModelRequest;
import ch.lianto.ollama.client.model.CreateModelResponse;
import ch.lianto.ollama.client.model.DeleteModelRequest;
import java.io.File;
import ch.lianto.ollama.client.model.ModelInfo;
import ch.lianto.ollama.client.model.ModelInfoRequest;
import ch.lianto.ollama.client.model.ModelsResponse;
import ch.lianto.ollama.client.model.PullModelRequest;
import ch.lianto.ollama.client.model.PullModelResponse;
import ch.lianto.ollama.client.model.PushModelRequest;
import ch.lianto.ollama.client.model.PushModelResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for ModelsApi
 */
@Ignore
public class ModelsApiTest {

    private final ModelsApi api = new ModelsApi();

    
    /**
     * Check to see if a blob exists on the Ollama server which is useful when creating models.
     *
     * 
     */
    @Test
    public void checkBlobTest()  {
        String name = null;
        api.checkBlob(name).block();

        // TODO: test validations
    }
    
    /**
     * Creates a model with another name from an existing model.
     *
     * 
     */
    @Test
    public void copyModelTest()  {
        CopyModelRequest copyModelRequest = null;
        api.copyModel(copyModelRequest).block();

        // TODO: test validations
    }
    
    /**
     * Create a blob from a file. Returns the server file path.
     *
     * 
     */
    @Test
    public void createBlobTest()  {
        String name = null;
        File body = null;
        api.createBlob(name, body).block();

        // TODO: test validations
    }
    
    /**
     * Create a model from a Modelfile.
     *
     * It is recommended to set &#x60;modelfile&#x60; to the content of the Modelfile rather than just set &#x60;path&#x60;. This is a requirement for remote create. Remote model creation should also create any file blobs, fields such as &#x60;FROM&#x60; and &#x60;ADAPTER&#x60;, explicitly with the server using Create a Blob and the value to the path indicated in the response.
     */
    @Test
    public void createModelTest()  {
        CreateModelRequest createModelRequest = null;
        CreateModelResponse response = api.createModel(createModelRequest).block();

        // TODO: test validations
    }
    
    /**
     * Delete a model and its data.
     *
     * 
     */
    @Test
    public void deleteModelTest()  {
        DeleteModelRequest deleteModelRequest = null;
        api.deleteModel(deleteModelRequest).block();

        // TODO: test validations
    }
    
    /**
     * List models that are available locally.
     *
     * 
     */
    @Test
    public void listModelsTest()  {
        ModelsResponse response = api.listModels().block();

        // TODO: test validations
    }
    
    /**
     * Download a model from the ollama library.
     *
     * Cancelled pulls are resumed from where they left off, and multiple calls will share the same download progress.
     */
    @Test
    public void pullModelTest()  {
        PullModelRequest pullModelRequest = null;
        PullModelResponse response = api.pullModel(pullModelRequest).block();

        // TODO: test validations
    }
    
    /**
     * Upload a model to a model library.
     *
     * Requires registering for ollama.ai and adding a public key first.
     */
    @Test
    public void pushModelTest()  {
        PushModelRequest pushModelRequest = null;
        PushModelResponse response = api.pushModel(pushModelRequest).block();

        // TODO: test validations
    }
    
    /**
     * Show details about a model including modelfile, template, parameters, license, and system prompt.
     *
     * 
     */
    @Test
    public void showModelInfoTest()  {
        ModelInfoRequest modelInfoRequest = null;
        ModelInfo response = api.showModelInfo(modelInfoRequest).block();

        // TODO: test validations
    }
    
}
