/*
 * Ollama API
 * API Spec for Ollama API. Please see https://github.com/jmorganca/ollama/blob/main/docs/api.md for more details.
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.lianto.ollama.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Additional model parameters listed in the documentation for the Modelfile such as &#x60;temperature&#x60;.
 */
@JsonPropertyOrder({
  RequestOptions.JSON_PROPERTY_NUM_KEEP,
  RequestOptions.JSON_PROPERTY_SEED,
  RequestOptions.JSON_PROPERTY_NUM_PREDICT,
  RequestOptions.JSON_PROPERTY_TOP_K,
  RequestOptions.JSON_PROPERTY_TOP_P,
  RequestOptions.JSON_PROPERTY_TFS_Z,
  RequestOptions.JSON_PROPERTY_TYPICAL_P,
  RequestOptions.JSON_PROPERTY_REPEAT_LAST_N,
  RequestOptions.JSON_PROPERTY_TEMPERATURE,
  RequestOptions.JSON_PROPERTY_REPEAT_PENALTY,
  RequestOptions.JSON_PROPERTY_PRESENCE_PENALTY,
  RequestOptions.JSON_PROPERTY_FREQUENCY_PENALTY,
  RequestOptions.JSON_PROPERTY_MIROSTAT,
  RequestOptions.JSON_PROPERTY_MIROSTAT_TAU,
  RequestOptions.JSON_PROPERTY_MIROSTAT_ETA,
  RequestOptions.JSON_PROPERTY_PENALIZE_NEWLINE,
  RequestOptions.JSON_PROPERTY_STOP,
  RequestOptions.JSON_PROPERTY_NUMA,
  RequestOptions.JSON_PROPERTY_NUM_CTX,
  RequestOptions.JSON_PROPERTY_NUM_BATCH,
  RequestOptions.JSON_PROPERTY_NUM_GQA,
  RequestOptions.JSON_PROPERTY_NUM_GPU,
  RequestOptions.JSON_PROPERTY_MAIN_GPU,
  RequestOptions.JSON_PROPERTY_LOW_VRAM,
  RequestOptions.JSON_PROPERTY_F16_KV,
  RequestOptions.JSON_PROPERTY_LOGITS_ALL,
  RequestOptions.JSON_PROPERTY_VOCAB_ONLY,
  RequestOptions.JSON_PROPERTY_USE_MMAP,
  RequestOptions.JSON_PROPERTY_USE_MLOCK,
  RequestOptions.JSON_PROPERTY_EMBEDDING_ONLY,
  RequestOptions.JSON_PROPERTY_ROPE_FREQUENCY_BASE,
  RequestOptions.JSON_PROPERTY_ROPE_FREQUENCY_SCALE,
  RequestOptions.JSON_PROPERTY_NUM_THREAD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T00:48:30.515751098+01:00[Europe/Zurich]")
public class RequestOptions {
  public static final String JSON_PROPERTY_NUM_KEEP = "num_keep";
  private Integer numKeep;

  public static final String JSON_PROPERTY_SEED = "seed";
  private Integer seed;

  public static final String JSON_PROPERTY_NUM_PREDICT = "num_predict";
  private Integer numPredict;

  public static final String JSON_PROPERTY_TOP_K = "top_k";
  private Integer topK;

  public static final String JSON_PROPERTY_TOP_P = "top_p";
  private Float topP;

  public static final String JSON_PROPERTY_TFS_Z = "tfs_z";
  private Float tfsZ;

  public static final String JSON_PROPERTY_TYPICAL_P = "typical_p";
  private Float typicalP;

  public static final String JSON_PROPERTY_REPEAT_LAST_N = "repeat_last_n";
  private Integer repeatLastN;

  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  private Float temperature;

  public static final String JSON_PROPERTY_REPEAT_PENALTY = "repeat_penalty";
  private Float repeatPenalty;

  public static final String JSON_PROPERTY_PRESENCE_PENALTY = "presence_penalty";
  private Float presencePenalty;

  public static final String JSON_PROPERTY_FREQUENCY_PENALTY = "frequency_penalty";
  private Float frequencyPenalty;

  public static final String JSON_PROPERTY_MIROSTAT = "mirostat";
  private Integer mirostat;

  public static final String JSON_PROPERTY_MIROSTAT_TAU = "mirostat_tau";
  private Float mirostatTau;

  public static final String JSON_PROPERTY_MIROSTAT_ETA = "mirostat_eta";
  private Float mirostatEta;

  public static final String JSON_PROPERTY_PENALIZE_NEWLINE = "penalize_newline";
  private Boolean penalizeNewline;

  public static final String JSON_PROPERTY_STOP = "stop";
  private List<String> stop;

  public static final String JSON_PROPERTY_NUMA = "numa";
  private Boolean numa;

  public static final String JSON_PROPERTY_NUM_CTX = "num_ctx";
  private Integer numCtx;

  public static final String JSON_PROPERTY_NUM_BATCH = "num_batch";
  private Integer numBatch;

  public static final String JSON_PROPERTY_NUM_GQA = "num_gqa";
  private Integer numGqa;

  public static final String JSON_PROPERTY_NUM_GPU = "num_gpu";
  private Integer numGpu;

  public static final String JSON_PROPERTY_MAIN_GPU = "main_gpu";
  private Integer mainGpu;

  public static final String JSON_PROPERTY_LOW_VRAM = "low_vram";
  private Boolean lowVram;

  public static final String JSON_PROPERTY_F16_KV = "f16_kv";
  private Boolean f16Kv;

  public static final String JSON_PROPERTY_LOGITS_ALL = "logits_all";
  private Boolean logitsAll;

  public static final String JSON_PROPERTY_VOCAB_ONLY = "vocab_only";
  private Boolean vocabOnly;

  public static final String JSON_PROPERTY_USE_MMAP = "use_mmap";
  private Boolean useMmap;

  public static final String JSON_PROPERTY_USE_MLOCK = "use_mlock";
  private Boolean useMlock;

  public static final String JSON_PROPERTY_EMBEDDING_ONLY = "embedding_only";
  private Boolean embeddingOnly;

  public static final String JSON_PROPERTY_ROPE_FREQUENCY_BASE = "rope_frequency_base";
  private Float ropeFrequencyBase;

  public static final String JSON_PROPERTY_ROPE_FREQUENCY_SCALE = "rope_frequency_scale";
  private Float ropeFrequencyScale;

  public static final String JSON_PROPERTY_NUM_THREAD = "num_thread";
  private Integer numThread;

  public RequestOptions() {
  }

  public RequestOptions numKeep(Integer numKeep) {
    
    this.numKeep = numKeep;
    return this;
  }

   /**
   * Number of tokens to keep from the prompt. 
   * @return numKeep
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_KEEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumKeep() {
    return numKeep;
  }


  @JsonProperty(JSON_PROPERTY_NUM_KEEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumKeep(Integer numKeep) {
    this.numKeep = numKeep;
  }


  public RequestOptions seed(Integer seed) {
    
    this.seed = seed;
    return this;
  }

   /**
   * Sets the random number seed to use for generation. Setting this to a specific number will make the model generate the same text for the same prompt. (Default: 0) 
   * @return seed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSeed() {
    return seed;
  }


  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeed(Integer seed) {
    this.seed = seed;
  }


  public RequestOptions numPredict(Integer numPredict) {
    
    this.numPredict = numPredict;
    return this;
  }

   /**
   * Maximum number of tokens to predict when generating text. (Default: 128, -1 &#x3D; infinite generation, -2 &#x3D; fill context) 
   * @return numPredict
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_PREDICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumPredict() {
    return numPredict;
  }


  @JsonProperty(JSON_PROPERTY_NUM_PREDICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumPredict(Integer numPredict) {
    this.numPredict = numPredict;
  }


  public RequestOptions topK(Integer topK) {
    
    this.topK = topK;
    return this;
  }

   /**
   * Reduces the probability of generating nonsense. A higher value (e.g. 100) will give more diverse answers, while a lower value (e.g. 10) will be more conservative. (Default: 40) 
   * @return topK
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOP_K)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTopK() {
    return topK;
  }


  @JsonProperty(JSON_PROPERTY_TOP_K)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTopK(Integer topK) {
    this.topK = topK;
  }


  public RequestOptions topP(Float topP) {
    
    this.topP = topP;
    return this;
  }

   /**
   * Works together with top-k. A higher value (e.g., 0.95) will lead to more diverse text, while a lower value (e.g., 0.5) will generate more focused and conservative text. (Default: 0.9) 
   * @return topP
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTopP() {
    return topP;
  }


  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTopP(Float topP) {
    this.topP = topP;
  }


  public RequestOptions tfsZ(Float tfsZ) {
    
    this.tfsZ = tfsZ;
    return this;
  }

   /**
   * Tail free sampling is used to reduce the impact of less probable tokens from the output. A higher value (e.g., 2.0) will reduce the impact more, while a value of 1.0 disables this setting. (default: 1) 
   * @return tfsZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TFS_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTfsZ() {
    return tfsZ;
  }


  @JsonProperty(JSON_PROPERTY_TFS_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTfsZ(Float tfsZ) {
    this.tfsZ = tfsZ;
  }


  public RequestOptions typicalP(Float typicalP) {
    
    this.typicalP = typicalP;
    return this;
  }

   /**
   * Typical p is used to reduce the impact of less probable tokens from the output. 
   * @return typicalP
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPICAL_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTypicalP() {
    return typicalP;
  }


  @JsonProperty(JSON_PROPERTY_TYPICAL_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypicalP(Float typicalP) {
    this.typicalP = typicalP;
  }


  public RequestOptions repeatLastN(Integer repeatLastN) {
    
    this.repeatLastN = repeatLastN;
    return this;
  }

   /**
   * Sets how far back for the model to look back to prevent repetition. (Default: 64, 0 &#x3D; disabled, -1 &#x3D; num_ctx) 
   * @return repeatLastN
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPEAT_LAST_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRepeatLastN() {
    return repeatLastN;
  }


  @JsonProperty(JSON_PROPERTY_REPEAT_LAST_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepeatLastN(Integer repeatLastN) {
    this.repeatLastN = repeatLastN;
  }


  public RequestOptions temperature(Float temperature) {
    
    this.temperature = temperature;
    return this;
  }

   /**
   * The temperature of the model. Increasing the temperature will make the model answer more creatively. (Default: 0.8) 
   * @return temperature
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getTemperature() {
    return temperature;
  }


  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemperature(Float temperature) {
    this.temperature = temperature;
  }


  public RequestOptions repeatPenalty(Float repeatPenalty) {
    
    this.repeatPenalty = repeatPenalty;
    return this;
  }

   /**
   * Sets how strongly to penalize repetitions. A higher value (e.g., 1.5) will penalize repetitions more strongly, while a lower value (e.g., 0.9) will be more lenient. (Default: 1.1) 
   * @return repeatPenalty
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPEAT_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getRepeatPenalty() {
    return repeatPenalty;
  }


  @JsonProperty(JSON_PROPERTY_REPEAT_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepeatPenalty(Float repeatPenalty) {
    this.repeatPenalty = repeatPenalty;
  }


  public RequestOptions presencePenalty(Float presencePenalty) {
    
    this.presencePenalty = presencePenalty;
    return this;
  }

   /**
   * Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics. 
   * @return presencePenalty
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRESENCE_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getPresencePenalty() {
    return presencePenalty;
  }


  @JsonProperty(JSON_PROPERTY_PRESENCE_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPresencePenalty(Float presencePenalty) {
    this.presencePenalty = presencePenalty;
  }


  public RequestOptions frequencyPenalty(Float frequencyPenalty) {
    
    this.frequencyPenalty = frequencyPenalty;
    return this;
  }

   /**
   * Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim. 
   * @return frequencyPenalty
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREQUENCY_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getFrequencyPenalty() {
    return frequencyPenalty;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENCY_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrequencyPenalty(Float frequencyPenalty) {
    this.frequencyPenalty = frequencyPenalty;
  }


  public RequestOptions mirostat(Integer mirostat) {
    
    this.mirostat = mirostat;
    return this;
  }

   /**
   * Enable Mirostat sampling for controlling perplexity. (default: 0, 0 &#x3D; disabled, 1 &#x3D; Mirostat, 2 &#x3D; Mirostat 2.0) 
   * @return mirostat
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIROSTAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMirostat() {
    return mirostat;
  }


  @JsonProperty(JSON_PROPERTY_MIROSTAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMirostat(Integer mirostat) {
    this.mirostat = mirostat;
  }


  public RequestOptions mirostatTau(Float mirostatTau) {
    
    this.mirostatTau = mirostatTau;
    return this;
  }

   /**
   * Controls the balance between coherence and diversity of the output. A lower value will result in more focused and coherent text. (Default: 5.0) 
   * @return mirostatTau
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIROSTAT_TAU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getMirostatTau() {
    return mirostatTau;
  }


  @JsonProperty(JSON_PROPERTY_MIROSTAT_TAU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMirostatTau(Float mirostatTau) {
    this.mirostatTau = mirostatTau;
  }


  public RequestOptions mirostatEta(Float mirostatEta) {
    
    this.mirostatEta = mirostatEta;
    return this;
  }

   /**
   * Influences how quickly the algorithm responds to feedback from the generated text. A lower learning rate will result in slower adjustments, while a higher learning rate will make the algorithm more responsive. (Default: 0.1) 
   * @return mirostatEta
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIROSTAT_ETA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getMirostatEta() {
    return mirostatEta;
  }


  @JsonProperty(JSON_PROPERTY_MIROSTAT_ETA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMirostatEta(Float mirostatEta) {
    this.mirostatEta = mirostatEta;
  }


  public RequestOptions penalizeNewline(Boolean penalizeNewline) {
    
    this.penalizeNewline = penalizeNewline;
    return this;
  }

   /**
   * Penalize newlines in the output. (Default: false) 
   * @return penalizeNewline
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PENALIZE_NEWLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPenalizeNewline() {
    return penalizeNewline;
  }


  @JsonProperty(JSON_PROPERTY_PENALIZE_NEWLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPenalizeNewline(Boolean penalizeNewline) {
    this.penalizeNewline = penalizeNewline;
  }


  public RequestOptions stop(List<String> stop) {
    
    this.stop = stop;
    return this;
  }

  public RequestOptions addStopItem(String stopItem) {
    if (this.stop == null) {
      this.stop = new ArrayList<>();
    }
    this.stop.add(stopItem);
    return this;
  }

   /**
   * Sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
   * @return stop
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getStop() {
    return stop;
  }


  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStop(List<String> stop) {
    this.stop = stop;
  }


  public RequestOptions numa(Boolean numa) {
    
    this.numa = numa;
    return this;
  }

   /**
   * Enable NUMA support. (Default: false) 
   * @return numa
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNuma() {
    return numa;
  }


  @JsonProperty(JSON_PROPERTY_NUMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNuma(Boolean numa) {
    this.numa = numa;
  }


  public RequestOptions numCtx(Integer numCtx) {
    
    this.numCtx = numCtx;
    return this;
  }

   /**
   * Sets the size of the context window used to generate the next token. 
   * @return numCtx
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_CTX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumCtx() {
    return numCtx;
  }


  @JsonProperty(JSON_PROPERTY_NUM_CTX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumCtx(Integer numCtx) {
    this.numCtx = numCtx;
  }


  public RequestOptions numBatch(Integer numBatch) {
    
    this.numBatch = numBatch;
    return this;
  }

   /**
   * Sets the number of batches to use for generation. (Default: 1) 
   * @return numBatch
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_BATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumBatch() {
    return numBatch;
  }


  @JsonProperty(JSON_PROPERTY_NUM_BATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumBatch(Integer numBatch) {
    this.numBatch = numBatch;
  }


  public RequestOptions numGqa(Integer numGqa) {
    
    this.numGqa = numGqa;
    return this;
  }

   /**
   * The number of GQA groups in the transformer layer. Required for some models, for example it is 8 for &#x60;llama2:70b&#x60;. 
   * @return numGqa
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_GQA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumGqa() {
    return numGqa;
  }


  @JsonProperty(JSON_PROPERTY_NUM_GQA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumGqa(Integer numGqa) {
    this.numGqa = numGqa;
  }


  public RequestOptions numGpu(Integer numGpu) {
    
    this.numGpu = numGpu;
    return this;
  }

   /**
   * The number of layers to send to the GPU(s). On macOS it defaults to 1 to enable metal support, 0 to disable. 
   * @return numGpu
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_GPU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumGpu() {
    return numGpu;
  }


  @JsonProperty(JSON_PROPERTY_NUM_GPU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumGpu(Integer numGpu) {
    this.numGpu = numGpu;
  }


  public RequestOptions mainGpu(Integer mainGpu) {
    
    this.mainGpu = mainGpu;
    return this;
  }

   /**
   * The GPU to use for the main model. Default is 0. 
   * @return mainGpu
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAIN_GPU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMainGpu() {
    return mainGpu;
  }


  @JsonProperty(JSON_PROPERTY_MAIN_GPU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMainGpu(Integer mainGpu) {
    this.mainGpu = mainGpu;
  }


  public RequestOptions lowVram(Boolean lowVram) {
    
    this.lowVram = lowVram;
    return this;
  }

   /**
   * Enable low VRAM mode. (Default: false) 
   * @return lowVram
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOW_VRAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLowVram() {
    return lowVram;
  }


  @JsonProperty(JSON_PROPERTY_LOW_VRAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLowVram(Boolean lowVram) {
    this.lowVram = lowVram;
  }


  public RequestOptions f16Kv(Boolean f16Kv) {
    
    this.f16Kv = f16Kv;
    return this;
  }

   /**
   * Enable f16 key/value. (Default: false) 
   * @return f16Kv
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_F16_KV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getF16Kv() {
    return f16Kv;
  }


  @JsonProperty(JSON_PROPERTY_F16_KV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setF16Kv(Boolean f16Kv) {
    this.f16Kv = f16Kv;
  }


  public RequestOptions logitsAll(Boolean logitsAll) {
    
    this.logitsAll = logitsAll;
    return this;
  }

   /**
   * Enable logits all. (Default: false) 
   * @return logitsAll
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGITS_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLogitsAll() {
    return logitsAll;
  }


  @JsonProperty(JSON_PROPERTY_LOGITS_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogitsAll(Boolean logitsAll) {
    this.logitsAll = logitsAll;
  }


  public RequestOptions vocabOnly(Boolean vocabOnly) {
    
    this.vocabOnly = vocabOnly;
    return this;
  }

   /**
   * Enable vocab only. (Default: false) 
   * @return vocabOnly
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VOCAB_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getVocabOnly() {
    return vocabOnly;
  }


  @JsonProperty(JSON_PROPERTY_VOCAB_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVocabOnly(Boolean vocabOnly) {
    this.vocabOnly = vocabOnly;
  }


  public RequestOptions useMmap(Boolean useMmap) {
    
    this.useMmap = useMmap;
    return this;
  }

   /**
   * Enable mmap. (Default: false) 
   * @return useMmap
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_MMAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseMmap() {
    return useMmap;
  }


  @JsonProperty(JSON_PROPERTY_USE_MMAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseMmap(Boolean useMmap) {
    this.useMmap = useMmap;
  }


  public RequestOptions useMlock(Boolean useMlock) {
    
    this.useMlock = useMlock;
    return this;
  }

   /**
   * Enable mlock. (Default: false) 
   * @return useMlock
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_MLOCK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseMlock() {
    return useMlock;
  }


  @JsonProperty(JSON_PROPERTY_USE_MLOCK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseMlock(Boolean useMlock) {
    this.useMlock = useMlock;
  }


  public RequestOptions embeddingOnly(Boolean embeddingOnly) {
    
    this.embeddingOnly = embeddingOnly;
    return this;
  }

   /**
   * Enable embedding only. (Default: false) 
   * @return embeddingOnly
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMBEDDING_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmbeddingOnly() {
    return embeddingOnly;
  }


  @JsonProperty(JSON_PROPERTY_EMBEDDING_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmbeddingOnly(Boolean embeddingOnly) {
    this.embeddingOnly = embeddingOnly;
  }


  public RequestOptions ropeFrequencyBase(Float ropeFrequencyBase) {
    
    this.ropeFrequencyBase = ropeFrequencyBase;
    return this;
  }

   /**
   * The base of the rope frequency scale. (Default: 1.0) 
   * @return ropeFrequencyBase
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROPE_FREQUENCY_BASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getRopeFrequencyBase() {
    return ropeFrequencyBase;
  }


  @JsonProperty(JSON_PROPERTY_ROPE_FREQUENCY_BASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRopeFrequencyBase(Float ropeFrequencyBase) {
    this.ropeFrequencyBase = ropeFrequencyBase;
  }


  public RequestOptions ropeFrequencyScale(Float ropeFrequencyScale) {
    
    this.ropeFrequencyScale = ropeFrequencyScale;
    return this;
  }

   /**
   * The scale of the rope frequency. (Default: 1.0) 
   * @return ropeFrequencyScale
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROPE_FREQUENCY_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getRopeFrequencyScale() {
    return ropeFrequencyScale;
  }


  @JsonProperty(JSON_PROPERTY_ROPE_FREQUENCY_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRopeFrequencyScale(Float ropeFrequencyScale) {
    this.ropeFrequencyScale = ropeFrequencyScale;
  }


  public RequestOptions numThread(Integer numThread) {
    
    this.numThread = numThread;
    return this;
  }

   /**
   * Sets the number of threads to use during computation. By default, Ollama will detect this for optimal performance. It is recommended to set this value to the number of physical CPU cores your system has (as opposed to the logical number of cores). 
   * @return numThread
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_THREAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumThread() {
    return numThread;
  }


  @JsonProperty(JSON_PROPERTY_NUM_THREAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumThread(Integer numThread) {
    this.numThread = numThread;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestOptions requestOptions = (RequestOptions) o;
    return Objects.equals(this.numKeep, requestOptions.numKeep) &&
        Objects.equals(this.seed, requestOptions.seed) &&
        Objects.equals(this.numPredict, requestOptions.numPredict) &&
        Objects.equals(this.topK, requestOptions.topK) &&
        Objects.equals(this.topP, requestOptions.topP) &&
        Objects.equals(this.tfsZ, requestOptions.tfsZ) &&
        Objects.equals(this.typicalP, requestOptions.typicalP) &&
        Objects.equals(this.repeatLastN, requestOptions.repeatLastN) &&
        Objects.equals(this.temperature, requestOptions.temperature) &&
        Objects.equals(this.repeatPenalty, requestOptions.repeatPenalty) &&
        Objects.equals(this.presencePenalty, requestOptions.presencePenalty) &&
        Objects.equals(this.frequencyPenalty, requestOptions.frequencyPenalty) &&
        Objects.equals(this.mirostat, requestOptions.mirostat) &&
        Objects.equals(this.mirostatTau, requestOptions.mirostatTau) &&
        Objects.equals(this.mirostatEta, requestOptions.mirostatEta) &&
        Objects.equals(this.penalizeNewline, requestOptions.penalizeNewline) &&
        Objects.equals(this.stop, requestOptions.stop) &&
        Objects.equals(this.numa, requestOptions.numa) &&
        Objects.equals(this.numCtx, requestOptions.numCtx) &&
        Objects.equals(this.numBatch, requestOptions.numBatch) &&
        Objects.equals(this.numGqa, requestOptions.numGqa) &&
        Objects.equals(this.numGpu, requestOptions.numGpu) &&
        Objects.equals(this.mainGpu, requestOptions.mainGpu) &&
        Objects.equals(this.lowVram, requestOptions.lowVram) &&
        Objects.equals(this.f16Kv, requestOptions.f16Kv) &&
        Objects.equals(this.logitsAll, requestOptions.logitsAll) &&
        Objects.equals(this.vocabOnly, requestOptions.vocabOnly) &&
        Objects.equals(this.useMmap, requestOptions.useMmap) &&
        Objects.equals(this.useMlock, requestOptions.useMlock) &&
        Objects.equals(this.embeddingOnly, requestOptions.embeddingOnly) &&
        Objects.equals(this.ropeFrequencyBase, requestOptions.ropeFrequencyBase) &&
        Objects.equals(this.ropeFrequencyScale, requestOptions.ropeFrequencyScale) &&
        Objects.equals(this.numThread, requestOptions.numThread);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numKeep, seed, numPredict, topK, topP, tfsZ, typicalP, repeatLastN, temperature, repeatPenalty, presencePenalty, frequencyPenalty, mirostat, mirostatTau, mirostatEta, penalizeNewline, stop, numa, numCtx, numBatch, numGqa, numGpu, mainGpu, lowVram, f16Kv, logitsAll, vocabOnly, useMmap, useMlock, embeddingOnly, ropeFrequencyBase, ropeFrequencyScale, numThread);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestOptions {\n");
    sb.append("    numKeep: ").append(toIndentedString(numKeep)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    numPredict: ").append(toIndentedString(numPredict)).append("\n");
    sb.append("    topK: ").append(toIndentedString(topK)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    tfsZ: ").append(toIndentedString(tfsZ)).append("\n");
    sb.append("    typicalP: ").append(toIndentedString(typicalP)).append("\n");
    sb.append("    repeatLastN: ").append(toIndentedString(repeatLastN)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    repeatPenalty: ").append(toIndentedString(repeatPenalty)).append("\n");
    sb.append("    presencePenalty: ").append(toIndentedString(presencePenalty)).append("\n");
    sb.append("    frequencyPenalty: ").append(toIndentedString(frequencyPenalty)).append("\n");
    sb.append("    mirostat: ").append(toIndentedString(mirostat)).append("\n");
    sb.append("    mirostatTau: ").append(toIndentedString(mirostatTau)).append("\n");
    sb.append("    mirostatEta: ").append(toIndentedString(mirostatEta)).append("\n");
    sb.append("    penalizeNewline: ").append(toIndentedString(penalizeNewline)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    numa: ").append(toIndentedString(numa)).append("\n");
    sb.append("    numCtx: ").append(toIndentedString(numCtx)).append("\n");
    sb.append("    numBatch: ").append(toIndentedString(numBatch)).append("\n");
    sb.append("    numGqa: ").append(toIndentedString(numGqa)).append("\n");
    sb.append("    numGpu: ").append(toIndentedString(numGpu)).append("\n");
    sb.append("    mainGpu: ").append(toIndentedString(mainGpu)).append("\n");
    sb.append("    lowVram: ").append(toIndentedString(lowVram)).append("\n");
    sb.append("    f16Kv: ").append(toIndentedString(f16Kv)).append("\n");
    sb.append("    logitsAll: ").append(toIndentedString(logitsAll)).append("\n");
    sb.append("    vocabOnly: ").append(toIndentedString(vocabOnly)).append("\n");
    sb.append("    useMmap: ").append(toIndentedString(useMmap)).append("\n");
    sb.append("    useMlock: ").append(toIndentedString(useMlock)).append("\n");
    sb.append("    embeddingOnly: ").append(toIndentedString(embeddingOnly)).append("\n");
    sb.append("    ropeFrequencyBase: ").append(toIndentedString(ropeFrequencyBase)).append("\n");
    sb.append("    ropeFrequencyScale: ").append(toIndentedString(ropeFrequencyScale)).append("\n");
    sb.append("    numThread: ").append(toIndentedString(numThread)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

