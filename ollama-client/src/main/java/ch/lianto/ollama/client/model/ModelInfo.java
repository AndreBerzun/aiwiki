/*
 * Ollama API
 * API Spec for Ollama API. Please see https://github.com/jmorganca/ollama/blob/main/docs/api.md for more details.
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.lianto.ollama.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Details about a model including modelfile, template, parameters, license, and system prompt.
 */
@JsonPropertyOrder({
  ModelInfo.JSON_PROPERTY_LICENSE,
  ModelInfo.JSON_PROPERTY_MODELFILE,
  ModelInfo.JSON_PROPERTY_PARAMETERS,
  ModelInfo.JSON_PROPERTY_TEMPLATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-06T00:48:30.515751098+01:00[Europe/Zurich]")
public class ModelInfo {
  public static final String JSON_PROPERTY_LICENSE = "license";
  private String license;

  public static final String JSON_PROPERTY_MODELFILE = "modelfile";
  private String modelfile;

  public static final String JSON_PROPERTY_PARAMETERS = "parameters";
  private String parameters;

  public static final String JSON_PROPERTY_TEMPLATE = "template";
  private String template;

  public ModelInfo() {
  }

  public ModelInfo license(String license) {
    
    this.license = license;
    return this;
  }

   /**
   * The model&#39;s license.
   * @return license
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LICENSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLicense() {
    return license;
  }


  @JsonProperty(JSON_PROPERTY_LICENSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLicense(String license) {
    this.license = license;
  }


  public ModelInfo modelfile(String modelfile) {
    
    this.modelfile = modelfile;
    return this;
  }

   /**
   * The modelfile associated with the model.
   * @return modelfile
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODELFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModelfile() {
    return modelfile;
  }


  @JsonProperty(JSON_PROPERTY_MODELFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelfile(String modelfile) {
    this.modelfile = modelfile;
  }


  public ModelInfo parameters(String parameters) {
    
    this.parameters = parameters;
    return this;
  }

   /**
   * The model parameters.
   * @return parameters
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParameters() {
    return parameters;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameters(String parameters) {
    this.parameters = parameters;
  }


  public ModelInfo template(String template) {
    
    this.template = template;
    return this;
  }

   /**
   * The prompt template for the model.
   * @return template
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTemplate() {
    return template;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemplate(String template) {
    this.template = template;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelInfo modelInfo = (ModelInfo) o;
    return Objects.equals(this.license, modelInfo.license) &&
        Objects.equals(this.modelfile, modelInfo.modelfile) &&
        Objects.equals(this.parameters, modelInfo.parameters) &&
        Objects.equals(this.template, modelInfo.template);
  }

  @Override
  public int hashCode() {
    return Objects.hash(license, modelfile, parameters, template);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelInfo {\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    modelfile: ").append(toIndentedString(modelfile)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

