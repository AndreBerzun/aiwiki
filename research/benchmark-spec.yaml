name: 0.7.0 (GPT 3.5 embeddings, new benchmark)
dataSets:
  - name: critrole
    questions:
      # Identifying questions
      - prompt: Does Imogen have a love interest among the members of the group?
        expectedAnswer: Imogen has developed a romantic relationship with Laudna over course of the story.
        expectedChunks:
          - page: C3E65-A Path of Vengeance
            quote: After a moment, Imogen asks, "Can I kiss you? I can't tell if it's all right or not anymore." A flustered Laudna responds, "All right," and they kiss. Laudna tells Imogen she is her anchor, and when they were separated, she did terrible things, but Imogen assures her that she's not a bad person.
          - page: C3E49-The Aurora Grows
            quote: They hug each other, telling each other they love each other, and Imogen pulls out the locket. It reads, "The better halves make a better whole," and Imogen has decided that means you have to love it all, including their powers. They go to sleep sharing the bed.
          - page: C3E69-Nice
            quote: After sharing a kiss, they watch the darkness gathering over the village.
          - page: C3E79-To Hurt Is to Heal
            quote: Imogen loves Laudna deeply, but is disgusted at the thought of Delilah watching them all the time.
      - prompt: Did any members of the group get killed during the battle with Otohan Tull?
        expectedAnswer: The group has encountered Otohan multiple times. During their very first encounter with her, Otohan killed Laudna, Orym and Fearne.
        expectedChunks:
          - page: C3E33-Blood and Dust
            quote: as she stabs twice into Fearne. Fearne's final words are, "Boy, that was a hell of a run."
          - page: C3E33-Blood and Dust
            quote: Otohan stabs twice more, saying just before the killing blow, "We've met before." Orym is dead.
          - page: C3E34-What Dreams May Come
            quote: No one sees Laudna's death, but Imogen becomes aware that their psychic link is again broken
      - prompt: What is the secret behind the red moon Ruidus? Why does it call to Fearne and Imogen?
        expectedAnswer: The moon Ruidus is a prison created for the god-like being Predathos that once fought and consumed two of the Prime Deities. Under the influence of Predathos, a civilization of humanoids and other creates has grown on the surface of the moon. Special Exandrians called Ruidisborn share a mental connection with Predathos. It is presumed that Predathos is trying to use the Ruidisborn to free itself from its prison.
        expectedChunks:
          - page: C3E43-Axiom Shaken
            quote: Imogen shares that she and her mother are both Ruidusborn , and that her powers and the dreams have been increasing, causing Ebenold to wonder if she is an "Exaltant", a Ruidusborn who exhibits particularly strong connections
          - page: C3E43-Axiom Shaken
            quote: Ruidus was created by the gods during The Founding , when an entity they feared arrived from beyond the stars, called Predathos , which destroyed the deities known as Ethedok , the Endless Shadow, and Vordo , the Fateshaper. The other gods imprisoned Predathos within the moon where it remains, forgotten.
          - page: C3E43-Axiom Shaken
            quote: The party asks about Otohan Thull . Grim Verity believes that Thull is assembling an army of Ruidusborn in the Hellcatch Valley of Marquet, but they do not know for what purpose. They theorize Predathos is creating anchors to Exandria through the Ruidusborn, and that their powers come from that entity.
      - prompt: Who is Ira Wendegoth?
        expectedAnswer: Ira Wendagoth, also called the Nightmare King, is a fey creature and cruel scientist of the Unseelie Court who is involved in multiple events of the story. Ira was first introduced as an antagonist in the first story arc but later assisted the party in fighting the Ruidusborn. Ira is a very tall, thin and pale fey that has nightmarish facial features.
        expectedChunks:
          - page: C3E11-Chasing Nightmares
            quote: And there in the center of all this, an elongated, strange, spindly, humanoid-like figure , a male creature that had two arms and two legs of thin and long gaunt features, long fingernails, long fingers, a hairless, strange, pale, sallow head with no hair, black eyes, no nose, and a jack-o-lantern-like fanged smile, long pointed ears that curled to the back.
          - page: C3E11-Chasing Nightmares
            quote: asks Ira if he is the Nightmare King. Ira laughs and proudly admits it.
          - page: C3E11-Chasing Nightmares
            quote: He recognizes that Ira is some kind of fey creature
      # Summarizing questions
      # - prompt: What are the different arcs arching over the adventures of Bells Hells?
      # Source Question
      - prompt: In what episode did Ferne reunite with her mother for the first time in 90 years?
        expectedAnswer: Fearne reunited with her mother at the end of Episode 28, The Deathwish Run.
        expectedChunks:
          - page: C3E28-The Deathwish Run
            quote: Nervously tidying herself, Birdie runs up, grabs Fearne, and lifts her into a hug. They lovingly and haltingly greet each other, but when Fearne says it's been 90 years, Birdie responds it's been close to six years
  - name: spring
    questions:
      # Tutorial questions
      - prompt: How do I define a listener class or method that is executed during entity lifecycle events?
        #expectedAnswer: It is possible to hook into the entity lifecycle with the various sub-types of the EntityCallback interface. Declaring a component that implements one of these interfaces will register it automatically with the Spring context and execute its listener method once respective events are fired.
        expectedChunks:
          - page: Entity Callbacks
            quote: |
              The Spring Data infrastructure provides hooks for modifying an entity before and after certain methods are invoked.
              Those so called EntityCallback instances provide a convenient way to check and potentially modify an entity in a callback fashioned style. An EntityCallback looks pretty much like a specialized ApplicationListener .
          - page: Entity Callbacks
            quote: public interface BeforeSaveCallback<T> extends EntityCallback<T>
          - page: Entity Callbacks
            quote: |
              EntityCallback beans are picked up by the store specific implementations in case they are registered in the ApplicationContext .
              Most template APIs already implement ApplicationContextAware and therefore have access to the ApplicationContext
      - prompt: How can I extend an auto-generated Spring JPA repository with custom methods or behavior?
        expectedChunks:
          - page: Custom Repository Implementations
            quote: |
              To enrich a repository with custom functionality, you must first define a fragment interface and an implementation for the custom functionality, as follows:
          - page: Custom Repository Implementations
            quote: |
              Spring Data repositories are implemented by using fragments that form a repository composition.
              Fragments are the base repository, functional aspects (such as QueryDsl ), and custom interfaces along with their implementations.
              Each time you add an interface to your repository interface, you enhance the composition by adding a fragment.
              The base repository and repository aspect implementations are provided by each Spring Data module.
          - page: Custom Repository Implementations
            quote: |
              The most important part of the class name that corresponds to the fragment interface is the Impl postfix.


              The implementation itself does not depend on Spring Data and can be a regular Spring bean.
              Consequently, you can use standard dependency injection behavior to inject references to other beans (such as a JdbcTemplate ), take part in aspects, and so on
      - prompt: What configurations do I need to perform to use Springs JPA integration?
        expectedChunks:
          - page: Configuration
            quote: The Spring Data JPA repositories support can be activated through both JavaConfig as well as a custom XML namespace, as shown in the following example
          - page: Configuration
            quote: The JPA module of Spring Data contains a custom namespace that allows defining repository beans. It also contains certain features and element attributes that are special to JPA
          - page: Configuration
            quote: |
              @Configuration
              @EnableJpaRepositories
      - prompt: Can I reference native SQL queries with Spring JPA?
        expectedChunks:
          - page: JPA Query Methods
            quote: |
              ### Native Queries

              The @Query annotation allows for running native queries by setting the nativeQuery flag to true, as shown in the following example:
          - page: JPA Query Methods
            quote: Query(value = "SELECT * FROM USERS WHERE EMAIL_ADDRESS = ?1", nativeQuery = true)
      # Summarizing questions
      # - prompt: What are Spring JPAs features? What can I do with it?
      # Source Question
      - prompt: Which page can I read up on to learn about mapping query result tuples to custom POJO types?
        expectedChunks:
          - page: Projections
            quote: |
              Spring Data query methods usually return one or multiple instances of the aggregate root managed by the repository.
              However, it might sometimes be desirable to create projections based on certain attributes of those types.
              Spring Data allows modeling dedicated return types, to more selectively retrieve partial views of the managed aggregates
          - page: Projections
            quote: Imagine a repository and aggregate root type such as the following example
          - page: Projections
            quote: |
              Now imagine that we want to retrieve the person’s name attributes only.
              What means does Spring Data offer to achieve this? The rest of this chapter answers that question.