/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.lianto.openai.client.api;

import ch.lianto.openai.client.model.AssistantFileObject;
import ch.lianto.openai.client.model.AssistantObject;
import ch.lianto.openai.client.model.CreateAssistantFileRequest;
import ch.lianto.openai.client.model.CreateAssistantRequest;
import ch.lianto.openai.client.model.CreateMessageRequest;
import ch.lianto.openai.client.model.CreateRunRequest;
import ch.lianto.openai.client.model.CreateThreadAndRunRequest;
import ch.lianto.openai.client.model.CreateThreadRequest;
import ch.lianto.openai.client.model.DeleteAssistantFileResponse;
import ch.lianto.openai.client.model.DeleteAssistantResponse;
import ch.lianto.openai.client.model.DeleteThreadResponse;
import ch.lianto.openai.client.model.ListAssistantFilesResponse;
import ch.lianto.openai.client.model.ListAssistantsResponse;
import ch.lianto.openai.client.model.ListMessageFilesResponse;
import ch.lianto.openai.client.model.ListMessagesResponse;
import ch.lianto.openai.client.model.ListRunStepsResponse;
import ch.lianto.openai.client.model.ListRunsResponse;
import ch.lianto.openai.client.model.MessageFileObject;
import ch.lianto.openai.client.model.MessageObject;
import ch.lianto.openai.client.model.ModifyMessageRequest;
import ch.lianto.openai.client.model.ModifyRunRequest;
import ch.lianto.openai.client.model.ModifyThreadRequest;
import ch.lianto.openai.client.model.RunObject;
import ch.lianto.openai.client.model.RunStepObject;
import ch.lianto.openai.client.model.SubmitToolOutputsRunRequest;
import ch.lianto.openai.client.model.ThreadObject;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssistantsApi
 */
@Ignore
public class AssistantsApiTest {

    private final AssistantsApi api = new AssistantsApi();

    
    /**
     * Cancels a run that is &#x60;in_progress&#x60;.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelRunTest() {
        String threadId = null;
        String runId = null;
        RunObject response = api.cancelRun(threadId, runId);

        // TODO: test validations
    }
    
    /**
     * Create an assistant with a model and instructions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAssistantTest() {
        CreateAssistantRequest createAssistantRequest = null;
        AssistantObject response = api.createAssistant(createAssistantRequest);

        // TODO: test validations
    }
    
    /**
     * Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAssistantFileTest() {
        String assistantId = null;
        CreateAssistantFileRequest createAssistantFileRequest = null;
        AssistantFileObject response = api.createAssistantFile(assistantId, createAssistantFileRequest);

        // TODO: test validations
    }
    
    /**
     * Create a message.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMessageTest() {
        String threadId = null;
        CreateMessageRequest createMessageRequest = null;
        MessageObject response = api.createMessage(threadId, createMessageRequest);

        // TODO: test validations
    }
    
    /**
     * Create a run.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRunTest() {
        String threadId = null;
        CreateRunRequest createRunRequest = null;
        RunObject response = api.createRun(threadId, createRunRequest);

        // TODO: test validations
    }
    
    /**
     * Create a thread.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createThreadTest() {
        CreateThreadRequest createThreadRequest = null;
        ThreadObject response = api.createThread(createThreadRequest);

        // TODO: test validations
    }
    
    /**
     * Create a thread and run it in one request.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createThreadAndRunTest() {
        CreateThreadAndRunRequest createThreadAndRunRequest = null;
        RunObject response = api.createThreadAndRun(createThreadAndRunRequest);

        // TODO: test validations
    }
    
    /**
     * Delete an assistant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAssistantTest() {
        String assistantId = null;
        DeleteAssistantResponse response = api.deleteAssistant(assistantId);

        // TODO: test validations
    }
    
    /**
     * Delete an assistant file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAssistantFileTest() {
        String assistantId = null;
        String fileId = null;
        DeleteAssistantFileResponse response = api.deleteAssistantFile(assistantId, fileId);

        // TODO: test validations
    }
    
    /**
     * Delete a thread.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteThreadTest() {
        String threadId = null;
        DeleteThreadResponse response = api.deleteThread(threadId);

        // TODO: test validations
    }
    
    /**
     * Retrieves an assistant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssistantTest() {
        String assistantId = null;
        AssistantObject response = api.getAssistant(assistantId);

        // TODO: test validations
    }
    
    /**
     * Retrieves an AssistantFile.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssistantFileTest() {
        String assistantId = null;
        String fileId = null;
        AssistantFileObject response = api.getAssistantFile(assistantId, fileId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a message.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageTest() {
        String threadId = null;
        String messageId = null;
        MessageObject response = api.getMessage(threadId, messageId);

        // TODO: test validations
    }
    
    /**
     * Retrieves a message file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageFileTest() {
        String threadId = null;
        String messageId = null;
        String fileId = null;
        MessageFileObject response = api.getMessageFile(threadId, messageId, fileId);

        // TODO: test validations
    }
    
    /**
     * Retrieves a run.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRunTest() {
        String threadId = null;
        String runId = null;
        RunObject response = api.getRun(threadId, runId);

        // TODO: test validations
    }
    
    /**
     * Retrieves a run step.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRunStepTest() {
        String threadId = null;
        String runId = null;
        String stepId = null;
        RunStepObject response = api.getRunStep(threadId, runId, stepId);

        // TODO: test validations
    }
    
    /**
     * Retrieves a thread.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThreadTest() {
        String threadId = null;
        ThreadObject response = api.getThread(threadId);

        // TODO: test validations
    }
    
    /**
     * Returns a list of assistant files.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAssistantFilesTest() {
        String assistantId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        ListAssistantFilesResponse response = api.listAssistantFiles(assistantId, limit, order, after, before);

        // TODO: test validations
    }
    
    /**
     * Returns a list of assistants.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAssistantsTest() {
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        ListAssistantsResponse response = api.listAssistants(limit, order, after, before);

        // TODO: test validations
    }
    
    /**
     * Returns a list of message files.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMessageFilesTest() {
        String threadId = null;
        String messageId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        ListMessageFilesResponse response = api.listMessageFiles(threadId, messageId, limit, order, after, before);

        // TODO: test validations
    }
    
    /**
     * Returns a list of messages for a given thread.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMessagesTest() {
        String threadId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        ListMessagesResponse response = api.listMessages(threadId, limit, order, after, before);

        // TODO: test validations
    }
    
    /**
     * Returns a list of run steps belonging to a run.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRunStepsTest() {
        String threadId = null;
        String runId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        ListRunStepsResponse response = api.listRunSteps(threadId, runId, limit, order, after, before);

        // TODO: test validations
    }
    
    /**
     * Returns a list of runs belonging to a thread.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRunsTest() {
        String threadId = null;
        Integer limit = null;
        String order = null;
        String after = null;
        String before = null;
        ListRunsResponse response = api.listRuns(threadId, limit, order, after, before);

        // TODO: test validations
    }
    
    /**
     * Modifies a message.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyMessageTest() {
        String threadId = null;
        String messageId = null;
        ModifyMessageRequest modifyMessageRequest = null;
        MessageObject response = api.modifyMessage(threadId, messageId, modifyMessageRequest);

        // TODO: test validations
    }
    
    /**
     * Modifies a run.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyRunTest() {
        String threadId = null;
        String runId = null;
        ModifyRunRequest modifyRunRequest = null;
        RunObject response = api.modifyRun(threadId, runId, modifyRunRequest);

        // TODO: test validations
    }
    
    /**
     * Modifies a thread.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyThreadTest() {
        String threadId = null;
        ModifyThreadRequest modifyThreadRequest = null;
        ThreadObject response = api.modifyThread(threadId, modifyThreadRequest);

        // TODO: test validations
    }
    
    /**
     * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be submitted in a single request. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitToolOuputsToRunTest() {
        String threadId = null;
        String runId = null;
        SubmitToolOutputsRunRequest submitToolOutputsRunRequest = null;
        RunObject response = api.submitToolOuputsToRun(threadId, runId, submitToolOutputsRunRequest);

        // TODO: test validations
    }
    
}
