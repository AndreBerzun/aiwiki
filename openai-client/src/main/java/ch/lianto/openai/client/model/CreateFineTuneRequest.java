/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.lianto.openai.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.lianto.openai.client.model.CreateFineTuneRequestHyperparameters;
import ch.lianto.openai.client.model.CreateFineTuneRequestModel;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateFineTuneRequest
 */
@JsonPropertyOrder({
  CreateFineTuneRequest.JSON_PROPERTY_TRAINING_FILE,
  CreateFineTuneRequest.JSON_PROPERTY_BATCH_SIZE,
  CreateFineTuneRequest.JSON_PROPERTY_CLASSIFICATION_BETAS,
  CreateFineTuneRequest.JSON_PROPERTY_CLASSIFICATION_N_CLASSES,
  CreateFineTuneRequest.JSON_PROPERTY_CLASSIFICATION_POSITIVE_CLASS,
  CreateFineTuneRequest.JSON_PROPERTY_COMPUTE_CLASSIFICATION_METRICS,
  CreateFineTuneRequest.JSON_PROPERTY_HYPERPARAMETERS,
  CreateFineTuneRequest.JSON_PROPERTY_LEARNING_RATE_MULTIPLIER,
  CreateFineTuneRequest.JSON_PROPERTY_MODEL,
  CreateFineTuneRequest.JSON_PROPERTY_PROMPT_LOSS_WEIGHT,
  CreateFineTuneRequest.JSON_PROPERTY_SUFFIX,
  CreateFineTuneRequest.JSON_PROPERTY_VALIDATION_FILE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-08T23:05:52.228713843+01:00[Europe/Zurich]")
public class CreateFineTuneRequest {
  public static final String JSON_PROPERTY_TRAINING_FILE = "training_file";
  private String trainingFile;

  public static final String JSON_PROPERTY_BATCH_SIZE = "batch_size";
  private JsonNullable<Integer> batchSize = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_CLASSIFICATION_BETAS = "classification_betas";
  private JsonNullable<List<BigDecimal>> classificationBetas = JsonNullable.<List<BigDecimal>>undefined();

  public static final String JSON_PROPERTY_CLASSIFICATION_N_CLASSES = "classification_n_classes";
  private JsonNullable<Integer> classificationNClasses = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_CLASSIFICATION_POSITIVE_CLASS = "classification_positive_class";
  private JsonNullable<String> classificationPositiveClass = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_COMPUTE_CLASSIFICATION_METRICS = "compute_classification_metrics";
  private JsonNullable<Boolean> computeClassificationMetrics = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_HYPERPARAMETERS = "hyperparameters";
  private CreateFineTuneRequestHyperparameters hyperparameters;

  public static final String JSON_PROPERTY_LEARNING_RATE_MULTIPLIER = "learning_rate_multiplier";
  private JsonNullable<BigDecimal> learningRateMultiplier = JsonNullable.<BigDecimal>undefined();

  public static final String JSON_PROPERTY_MODEL = "model";
  private JsonNullable<CreateFineTuneRequestModel> model = JsonNullable.<CreateFineTuneRequestModel>of(curie);

  public static final String JSON_PROPERTY_PROMPT_LOSS_WEIGHT = "prompt_loss_weight";
  private JsonNullable<BigDecimal> promptLossWeight = JsonNullable.<BigDecimal>of(new BigDecimal("0.01"));

  public static final String JSON_PROPERTY_SUFFIX = "suffix";
  private JsonNullable<String> suffix = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_VALIDATION_FILE = "validation_file";
  private JsonNullable<String> validationFile = JsonNullable.<String>undefined();

  public CreateFineTuneRequest() {
  }

  public CreateFineTuneRequest trainingFile(String trainingFile) {
    
    this.trainingFile = trainingFile;
    return this;
  }

   /**
   * The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details. 
   * @return trainingFile
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRAINING_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTrainingFile() {
    return trainingFile;
  }


  @JsonProperty(JSON_PROPERTY_TRAINING_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrainingFile(String trainingFile) {
    this.trainingFile = trainingFile;
  }


  public CreateFineTuneRequest batchSize(Integer batchSize) {
    this.batchSize = JsonNullable.<Integer>of(batchSize);
    
    return this;
  }

   /**
   * The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we&#39;ve found that larger batch sizes tend to work better for larger datasets. 
   * @return batchSize
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getBatchSize() {
        return batchSize.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BATCH_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getBatchSize_JsonNullable() {
    return batchSize;
  }
  
  @JsonProperty(JSON_PROPERTY_BATCH_SIZE)
  public void setBatchSize_JsonNullable(JsonNullable<Integer> batchSize) {
    this.batchSize = batchSize;
  }

  public void setBatchSize(Integer batchSize) {
    this.batchSize = JsonNullable.<Integer>of(batchSize);
  }


  public CreateFineTuneRequest classificationBetas(List<BigDecimal> classificationBetas) {
    this.classificationBetas = JsonNullable.<List<BigDecimal>>of(classificationBetas);
    
    return this;
  }

  public CreateFineTuneRequest addClassificationBetasItem(BigDecimal classificationBetasItem) {
    if (this.classificationBetas == null || !this.classificationBetas.isPresent()) {
      this.classificationBetas = JsonNullable.<List<BigDecimal>>of(new ArrayList<>());
    }
    try {
      this.classificationBetas.get().add(classificationBetasItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. 
   * @return classificationBetas
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<BigDecimal> getClassificationBetas() {
        return classificationBetas.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_BETAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<BigDecimal>> getClassificationBetas_JsonNullable() {
    return classificationBetas;
  }
  
  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_BETAS)
  public void setClassificationBetas_JsonNullable(JsonNullable<List<BigDecimal>> classificationBetas) {
    this.classificationBetas = classificationBetas;
  }

  public void setClassificationBetas(List<BigDecimal> classificationBetas) {
    this.classificationBetas = JsonNullable.<List<BigDecimal>>of(classificationBetas);
  }


  public CreateFineTuneRequest classificationNClasses(Integer classificationNClasses) {
    this.classificationNClasses = JsonNullable.<Integer>of(classificationNClasses);
    
    return this;
  }

   /**
   * The number of classes in a classification task.  This parameter is required for multiclass classification. 
   * @return classificationNClasses
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getClassificationNClasses() {
        return classificationNClasses.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_N_CLASSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getClassificationNClasses_JsonNullable() {
    return classificationNClasses;
  }
  
  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_N_CLASSES)
  public void setClassificationNClasses_JsonNullable(JsonNullable<Integer> classificationNClasses) {
    this.classificationNClasses = classificationNClasses;
  }

  public void setClassificationNClasses(Integer classificationNClasses) {
    this.classificationNClasses = JsonNullable.<Integer>of(classificationNClasses);
  }


  public CreateFineTuneRequest classificationPositiveClass(String classificationPositiveClass) {
    this.classificationPositiveClass = JsonNullable.<String>of(classificationPositiveClass);
    
    return this;
  }

   /**
   * The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. 
   * @return classificationPositiveClass
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getClassificationPositiveClass() {
        return classificationPositiveClass.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_POSITIVE_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getClassificationPositiveClass_JsonNullable() {
    return classificationPositiveClass;
  }
  
  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_POSITIVE_CLASS)
  public void setClassificationPositiveClass_JsonNullable(JsonNullable<String> classificationPositiveClass) {
    this.classificationPositiveClass = classificationPositiveClass;
  }

  public void setClassificationPositiveClass(String classificationPositiveClass) {
    this.classificationPositiveClass = JsonNullable.<String>of(classificationPositiveClass);
  }


  public CreateFineTuneRequest computeClassificationMetrics(Boolean computeClassificationMetrics) {
    this.computeClassificationMetrics = JsonNullable.<Boolean>of(computeClassificationMetrics);
    
    return this;
  }

   /**
   * If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a &#x60;validation_file&#x60;. Additionally, you must specify &#x60;classification_n_classes&#x60; for multiclass classification or &#x60;classification_positive_class&#x60; for binary classification. 
   * @return computeClassificationMetrics
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getComputeClassificationMetrics() {
        return computeClassificationMetrics.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPUTE_CLASSIFICATION_METRICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getComputeClassificationMetrics_JsonNullable() {
    return computeClassificationMetrics;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPUTE_CLASSIFICATION_METRICS)
  public void setComputeClassificationMetrics_JsonNullable(JsonNullable<Boolean> computeClassificationMetrics) {
    this.computeClassificationMetrics = computeClassificationMetrics;
  }

  public void setComputeClassificationMetrics(Boolean computeClassificationMetrics) {
    this.computeClassificationMetrics = JsonNullable.<Boolean>of(computeClassificationMetrics);
  }


  public CreateFineTuneRequest hyperparameters(CreateFineTuneRequestHyperparameters hyperparameters) {
    
    this.hyperparameters = hyperparameters;
    return this;
  }

   /**
   * Get hyperparameters
   * @return hyperparameters
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HYPERPARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateFineTuneRequestHyperparameters getHyperparameters() {
    return hyperparameters;
  }


  @JsonProperty(JSON_PROPERTY_HYPERPARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHyperparameters(CreateFineTuneRequestHyperparameters hyperparameters) {
    this.hyperparameters = hyperparameters;
  }


  public CreateFineTuneRequest learningRateMultiplier(BigDecimal learningRateMultiplier) {
    this.learningRateMultiplier = JsonNullable.<BigDecimal>of(learningRateMultiplier);
    
    return this;
  }

   /**
   * The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final &#x60;batch_size&#x60; (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. 
   * @return learningRateMultiplier
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getLearningRateMultiplier() {
        return learningRateMultiplier.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LEARNING_RATE_MULTIPLIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getLearningRateMultiplier_JsonNullable() {
    return learningRateMultiplier;
  }
  
  @JsonProperty(JSON_PROPERTY_LEARNING_RATE_MULTIPLIER)
  public void setLearningRateMultiplier_JsonNullable(JsonNullable<BigDecimal> learningRateMultiplier) {
    this.learningRateMultiplier = learningRateMultiplier;
  }

  public void setLearningRateMultiplier(BigDecimal learningRateMultiplier) {
    this.learningRateMultiplier = JsonNullable.<BigDecimal>of(learningRateMultiplier);
  }


  public CreateFineTuneRequest model(CreateFineTuneRequestModel model) {
    this.model = JsonNullable.<CreateFineTuneRequestModel>of(model);
    
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public CreateFineTuneRequestModel getModel() {
        return model.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CreateFineTuneRequestModel> getModel_JsonNullable() {
    return model;
  }
  
  @JsonProperty(JSON_PROPERTY_MODEL)
  public void setModel_JsonNullable(JsonNullable<CreateFineTuneRequestModel> model) {
    this.model = model;
  }

  public void setModel(CreateFineTuneRequestModel model) {
    this.model = JsonNullable.<CreateFineTuneRequestModel>of(model);
  }


  public CreateFineTuneRequest promptLossWeight(BigDecimal promptLossWeight) {
    this.promptLossWeight = JsonNullable.<BigDecimal>of(promptLossWeight);
    
    return this;
  }

   /**
   * The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. 
   * @return promptLossWeight
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getPromptLossWeight() {
        return promptLossWeight.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROMPT_LOSS_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getPromptLossWeight_JsonNullable() {
    return promptLossWeight;
  }
  
  @JsonProperty(JSON_PROPERTY_PROMPT_LOSS_WEIGHT)
  public void setPromptLossWeight_JsonNullable(JsonNullable<BigDecimal> promptLossWeight) {
    this.promptLossWeight = promptLossWeight;
  }

  public void setPromptLossWeight(BigDecimal promptLossWeight) {
    this.promptLossWeight = JsonNullable.<BigDecimal>of(promptLossWeight);
  }


  public CreateFineTuneRequest suffix(String suffix) {
    this.suffix = JsonNullable.<String>of(suffix);
    
    return this;
  }

   /**
   * A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ada:ft-your-org:custom-model-name-2022-02-15-04-21-04&#x60;. 
   * @return suffix
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSuffix() {
        return suffix.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSuffix_JsonNullable() {
    return suffix;
  }
  
  @JsonProperty(JSON_PROPERTY_SUFFIX)
  public void setSuffix_JsonNullable(JsonNullable<String> suffix) {
    this.suffix = suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = JsonNullable.<String>of(suffix);
  }


  public CreateFineTuneRequest validationFile(String validationFile) {
    this.validationFile = JsonNullable.<String>of(validationFile);
    
    return this;
  }

   /**
   * The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details. 
   * @return validationFile
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getValidationFile() {
        return validationFile.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALIDATION_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getValidationFile_JsonNullable() {
    return validationFile;
  }
  
  @JsonProperty(JSON_PROPERTY_VALIDATION_FILE)
  public void setValidationFile_JsonNullable(JsonNullable<String> validationFile) {
    this.validationFile = validationFile;
  }

  public void setValidationFile(String validationFile) {
    this.validationFile = JsonNullable.<String>of(validationFile);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFineTuneRequest createFineTuneRequest = (CreateFineTuneRequest) o;
    return Objects.equals(this.trainingFile, createFineTuneRequest.trainingFile) &&
        equalsNullable(this.batchSize, createFineTuneRequest.batchSize) &&
        equalsNullable(this.classificationBetas, createFineTuneRequest.classificationBetas) &&
        equalsNullable(this.classificationNClasses, createFineTuneRequest.classificationNClasses) &&
        equalsNullable(this.classificationPositiveClass, createFineTuneRequest.classificationPositiveClass) &&
        equalsNullable(this.computeClassificationMetrics, createFineTuneRequest.computeClassificationMetrics) &&
        Objects.equals(this.hyperparameters, createFineTuneRequest.hyperparameters) &&
        equalsNullable(this.learningRateMultiplier, createFineTuneRequest.learningRateMultiplier) &&
        equalsNullable(this.model, createFineTuneRequest.model) &&
        equalsNullable(this.promptLossWeight, createFineTuneRequest.promptLossWeight) &&
        equalsNullable(this.suffix, createFineTuneRequest.suffix) &&
        equalsNullable(this.validationFile, createFineTuneRequest.validationFile);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(trainingFile, hashCodeNullable(batchSize), hashCodeNullable(classificationBetas), hashCodeNullable(classificationNClasses), hashCodeNullable(classificationPositiveClass), hashCodeNullable(computeClassificationMetrics), hyperparameters, hashCodeNullable(learningRateMultiplier), hashCodeNullable(model), hashCodeNullable(promptLossWeight), hashCodeNullable(suffix), hashCodeNullable(validationFile));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFineTuneRequest {\n");
    sb.append("    trainingFile: ").append(toIndentedString(trainingFile)).append("\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    classificationBetas: ").append(toIndentedString(classificationBetas)).append("\n");
    sb.append("    classificationNClasses: ").append(toIndentedString(classificationNClasses)).append("\n");
    sb.append("    classificationPositiveClass: ").append(toIndentedString(classificationPositiveClass)).append("\n");
    sb.append("    computeClassificationMetrics: ").append(toIndentedString(computeClassificationMetrics)).append("\n");
    sb.append("    hyperparameters: ").append(toIndentedString(hyperparameters)).append("\n");
    sb.append("    learningRateMultiplier: ").append(toIndentedString(learningRateMultiplier)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    promptLossWeight: ").append(toIndentedString(promptLossWeight)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    validationFile: ").append(toIndentedString(validationFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

