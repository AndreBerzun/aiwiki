/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.lianto.openai.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.lianto.openai.client.model.CreateImageEditRequestModel;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.File;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateImageVariationRequest
 */
@JsonPropertyOrder({
  CreateImageVariationRequest.JSON_PROPERTY_IMAGE,
  CreateImageVariationRequest.JSON_PROPERTY_MODEL,
  CreateImageVariationRequest.JSON_PROPERTY_N,
  CreateImageVariationRequest.JSON_PROPERTY_RESPONSE_FORMAT,
  CreateImageVariationRequest.JSON_PROPERTY_SIZE,
  CreateImageVariationRequest.JSON_PROPERTY_USER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-08T23:05:52.228713843+01:00[Europe/Zurich]")
public class CreateImageVariationRequest {
  public static final String JSON_PROPERTY_IMAGE = "image";
  private File image;

  public static final String JSON_PROPERTY_MODEL = "model";
  private JsonNullable<CreateImageEditRequestModel> model = JsonNullable.<CreateImageEditRequestModel>of(dall-e-2);

  public static final String JSON_PROPERTY_N = "n";
  private JsonNullable<Integer> n = JsonNullable.<Integer>of(1);

  /**
   * The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
   */
  public enum ResponseFormatEnum {
    URL("url"),
    
    B64_JSON("b64_json");

    private String value;

    ResponseFormatEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResponseFormatEnum fromValue(String value) {
      for (ResponseFormatEnum b : ResponseFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_RESPONSE_FORMAT = "response_format";
  private JsonNullable<ResponseFormatEnum> responseFormat = JsonNullable.<ResponseFormatEnum>of(ResponseFormatEnum.URL);

  /**
   * The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
   */
  public enum SizeEnum {
    _256X256("256x256"),
    
    _512X512("512x512"),
    
    _1024X1024("1024x1024");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_SIZE = "size";
  private JsonNullable<SizeEnum> size = JsonNullable.<SizeEnum>of(SizeEnum._1024X1024);

  public static final String JSON_PROPERTY_USER = "user";
  private String user;

  public CreateImageVariationRequest() {
  }

  public CreateImageVariationRequest image(File image) {
    
    this.image = image;
    return this;
  }

   /**
   * The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
   * @return image
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public File getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImage(File image) {
    this.image = image;
  }


  public CreateImageVariationRequest model(CreateImageEditRequestModel model) {
    this.model = JsonNullable.<CreateImageEditRequestModel>of(model);
    
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public CreateImageEditRequestModel getModel() {
        return model.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CreateImageEditRequestModel> getModel_JsonNullable() {
    return model;
  }
  
  @JsonProperty(JSON_PROPERTY_MODEL)
  public void setModel_JsonNullable(JsonNullable<CreateImageEditRequestModel> model) {
    this.model = model;
  }

  public void setModel(CreateImageEditRequestModel model) {
    this.model = JsonNullable.<CreateImageEditRequestModel>of(model);
  }


  public CreateImageVariationRequest n(Integer n) {
    this.n = JsonNullable.<Integer>of(n);
    
    return this;
  }

   /**
   * The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.
   * minimum: 1
   * maximum: 10
   * @return n
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getN() {
        return n.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getN_JsonNullable() {
    return n;
  }
  
  @JsonProperty(JSON_PROPERTY_N)
  public void setN_JsonNullable(JsonNullable<Integer> n) {
    this.n = n;
  }

  public void setN(Integer n) {
    this.n = JsonNullable.<Integer>of(n);
  }


  public CreateImageVariationRequest responseFormat(ResponseFormatEnum responseFormat) {
    this.responseFormat = JsonNullable.<ResponseFormatEnum>of(responseFormat);
    
    return this;
  }

   /**
   * The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
   * @return responseFormat
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public ResponseFormatEnum getResponseFormat() {
        return responseFormat.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ResponseFormatEnum> getResponseFormat_JsonNullable() {
    return responseFormat;
  }
  
  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  public void setResponseFormat_JsonNullable(JsonNullable<ResponseFormatEnum> responseFormat) {
    this.responseFormat = responseFormat;
  }

  public void setResponseFormat(ResponseFormatEnum responseFormat) {
    this.responseFormat = JsonNullable.<ResponseFormatEnum>of(responseFormat);
  }


  public CreateImageVariationRequest size(SizeEnum size) {
    this.size = JsonNullable.<SizeEnum>of(size);
    
    return this;
  }

   /**
   * The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
   * @return size
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public SizeEnum getSize() {
        return size.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<SizeEnum> getSize_JsonNullable() {
    return size;
  }
  
  @JsonProperty(JSON_PROPERTY_SIZE)
  public void setSize_JsonNullable(JsonNullable<SizeEnum> size) {
    this.size = size;
  }

  public void setSize(SizeEnum size) {
    this.size = JsonNullable.<SizeEnum>of(size);
  }


  public CreateImageVariationRequest user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   * @return user
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateImageVariationRequest createImageVariationRequest = (CreateImageVariationRequest) o;
    return Objects.equals(this.image, createImageVariationRequest.image) &&
        equalsNullable(this.model, createImageVariationRequest.model) &&
        equalsNullable(this.n, createImageVariationRequest.n) &&
        equalsNullable(this.responseFormat, createImageVariationRequest.responseFormat) &&
        equalsNullable(this.size, createImageVariationRequest.size) &&
        Objects.equals(this.user, createImageVariationRequest.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, hashCodeNullable(model), hashCodeNullable(n), hashCodeNullable(responseFormat), hashCodeNullable(size), user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateImageVariationRequest {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

