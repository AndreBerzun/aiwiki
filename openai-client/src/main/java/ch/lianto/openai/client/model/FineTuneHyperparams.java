/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.lianto.openai.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details.
 */
@JsonPropertyOrder({
  FineTuneHyperparams.JSON_PROPERTY_BATCH_SIZE,
  FineTuneHyperparams.JSON_PROPERTY_CLASSIFICATION_N_CLASSES,
  FineTuneHyperparams.JSON_PROPERTY_CLASSIFICATION_POSITIVE_CLASS,
  FineTuneHyperparams.JSON_PROPERTY_COMPUTE_CLASSIFICATION_METRICS,
  FineTuneHyperparams.JSON_PROPERTY_LEARNING_RATE_MULTIPLIER,
  FineTuneHyperparams.JSON_PROPERTY_N_EPOCHS,
  FineTuneHyperparams.JSON_PROPERTY_PROMPT_LOSS_WEIGHT
})
@JsonTypeName("FineTune_hyperparams")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-08T23:05:52.228713843+01:00[Europe/Zurich]")
public class FineTuneHyperparams {
  public static final String JSON_PROPERTY_BATCH_SIZE = "batch_size";
  private Integer batchSize;

  public static final String JSON_PROPERTY_CLASSIFICATION_N_CLASSES = "classification_n_classes";
  private Integer classificationNClasses;

  public static final String JSON_PROPERTY_CLASSIFICATION_POSITIVE_CLASS = "classification_positive_class";
  private String classificationPositiveClass;

  public static final String JSON_PROPERTY_COMPUTE_CLASSIFICATION_METRICS = "compute_classification_metrics";
  private Boolean computeClassificationMetrics;

  public static final String JSON_PROPERTY_LEARNING_RATE_MULTIPLIER = "learning_rate_multiplier";
  private BigDecimal learningRateMultiplier;

  public static final String JSON_PROPERTY_N_EPOCHS = "n_epochs";
  private Integer nEpochs;

  public static final String JSON_PROPERTY_PROMPT_LOSS_WEIGHT = "prompt_loss_weight";
  private BigDecimal promptLossWeight;

  public FineTuneHyperparams() {
  }

  public FineTuneHyperparams batchSize(Integer batchSize) {
    
    this.batchSize = batchSize;
    return this;
  }

   /**
   * The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass. 
   * @return batchSize
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BATCH_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBatchSize() {
    return batchSize;
  }


  @JsonProperty(JSON_PROPERTY_BATCH_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBatchSize(Integer batchSize) {
    this.batchSize = batchSize;
  }


  public FineTuneHyperparams classificationNClasses(Integer classificationNClasses) {
    
    this.classificationNClasses = classificationNClasses;
    return this;
  }

   /**
   * The number of classes to use for computing classification metrics. 
   * @return classificationNClasses
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_N_CLASSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getClassificationNClasses() {
    return classificationNClasses;
  }


  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_N_CLASSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClassificationNClasses(Integer classificationNClasses) {
    this.classificationNClasses = classificationNClasses;
  }


  public FineTuneHyperparams classificationPositiveClass(String classificationPositiveClass) {
    
    this.classificationPositiveClass = classificationPositiveClass;
    return this;
  }

   /**
   * The positive class to use for computing classification metrics. 
   * @return classificationPositiveClass
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_POSITIVE_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClassificationPositiveClass() {
    return classificationPositiveClass;
  }


  @JsonProperty(JSON_PROPERTY_CLASSIFICATION_POSITIVE_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClassificationPositiveClass(String classificationPositiveClass) {
    this.classificationPositiveClass = classificationPositiveClass;
  }


  public FineTuneHyperparams computeClassificationMetrics(Boolean computeClassificationMetrics) {
    
    this.computeClassificationMetrics = computeClassificationMetrics;
    return this;
  }

   /**
   * The classification metrics to compute using the validation dataset at the end of every epoch. 
   * @return computeClassificationMetrics
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPUTE_CLASSIFICATION_METRICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getComputeClassificationMetrics() {
    return computeClassificationMetrics;
  }


  @JsonProperty(JSON_PROPERTY_COMPUTE_CLASSIFICATION_METRICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComputeClassificationMetrics(Boolean computeClassificationMetrics) {
    this.computeClassificationMetrics = computeClassificationMetrics;
  }


  public FineTuneHyperparams learningRateMultiplier(BigDecimal learningRateMultiplier) {
    
    this.learningRateMultiplier = learningRateMultiplier;
    return this;
  }

   /**
   * The learning rate multiplier to use for training. 
   * @return learningRateMultiplier
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LEARNING_RATE_MULTIPLIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLearningRateMultiplier() {
    return learningRateMultiplier;
  }


  @JsonProperty(JSON_PROPERTY_LEARNING_RATE_MULTIPLIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLearningRateMultiplier(BigDecimal learningRateMultiplier) {
    this.learningRateMultiplier = learningRateMultiplier;
  }


  public FineTuneHyperparams nEpochs(Integer nEpochs) {
    
    this.nEpochs = nEpochs;
    return this;
  }

   /**
   * The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
   * @return nEpochs
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_N_EPOCHS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getnEpochs() {
    return nEpochs;
  }


  @JsonProperty(JSON_PROPERTY_N_EPOCHS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setnEpochs(Integer nEpochs) {
    this.nEpochs = nEpochs;
  }


  public FineTuneHyperparams promptLossWeight(BigDecimal promptLossWeight) {
    
    this.promptLossWeight = promptLossWeight;
    return this;
  }

   /**
   * The weight to use for loss on the prompt tokens. 
   * @return promptLossWeight
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROMPT_LOSS_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getPromptLossWeight() {
    return promptLossWeight;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT_LOSS_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPromptLossWeight(BigDecimal promptLossWeight) {
    this.promptLossWeight = promptLossWeight;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FineTuneHyperparams fineTuneHyperparams = (FineTuneHyperparams) o;
    return Objects.equals(this.batchSize, fineTuneHyperparams.batchSize) &&
        Objects.equals(this.classificationNClasses, fineTuneHyperparams.classificationNClasses) &&
        Objects.equals(this.classificationPositiveClass, fineTuneHyperparams.classificationPositiveClass) &&
        Objects.equals(this.computeClassificationMetrics, fineTuneHyperparams.computeClassificationMetrics) &&
        Objects.equals(this.learningRateMultiplier, fineTuneHyperparams.learningRateMultiplier) &&
        Objects.equals(this.nEpochs, fineTuneHyperparams.nEpochs) &&
        Objects.equals(this.promptLossWeight, fineTuneHyperparams.promptLossWeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchSize, classificationNClasses, classificationPositiveClass, computeClassificationMetrics, learningRateMultiplier, nEpochs, promptLossWeight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FineTuneHyperparams {\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    classificationNClasses: ").append(toIndentedString(classificationNClasses)).append("\n");
    sb.append("    classificationPositiveClass: ").append(toIndentedString(classificationPositiveClass)).append("\n");
    sb.append("    computeClassificationMetrics: ").append(toIndentedString(computeClassificationMetrics)).append("\n");
    sb.append("    learningRateMultiplier: ").append(toIndentedString(learningRateMultiplier)).append("\n");
    sb.append("    nEpochs: ").append(toIndentedString(nEpochs)).append("\n");
    sb.append("    promptLossWeight: ").append(toIndentedString(promptLossWeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

